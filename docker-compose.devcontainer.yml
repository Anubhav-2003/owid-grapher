version: "3.7"

# This docker-compose file creates a full local dev environment for both grapher and wordpress. It is meant for
# OWID internal developers as the setup of wordpress requires a copy of the wordpress database that is not
# publicly available.
# A similar setup for external contributors is planned.

# This setup assumes that work on the grapher happens outside any docker container - i.e. there is no Node 16
# container included in this setup. The idea is that grapher development (as well as running webpack and the
# admin server) happens on the host, and that only the mysql, php and nginx dependencies run as containers.

# The mysql database server is exposed on the host at the default mysql port of 3306 so you can use DB admin
# utilities on the host working against localhost:3306

# Before the first run you should download the database dumps. The easiest way to do this is to run the
# following 4 commands from a bash terminal with the root of the project as the working directory. Note that
# for the wordpress related downloads you'll need a working ssh setup on your host to connect to owid-live:
# ./devTools/docker/download-grapher-mysql.sh
# ./devTools/docker/download-wordpress-mysql.sh
# and if you want the wordpress file uploads as well then:
# ./devTools/docker/download-wordpress-uploads.sh

# Run `docker-compose up -d` to run all these services in deamon mode. The first time it will take a few minutes
# to build the containers and initialize and fill the database, afterwards it should be up in seconds.
# On the host, make sure you have a .env file with the correct settings, then start `yarn startTmuxServer` or similar
# and navigate to http://localhost:8080 to work with both the grapher admin and wordpress previews.

# Wordpress development
# The Wordpress admin is at http://localhost:8080/wp/wp-admin/
# While working on the editor blocks of the OWID Wordpress plugin, run `yarn startWordpressPlugin`.
# Alternatively, you can run `yarn buildWordpressPlugin` if you're working in Wordpress but not actively updating the editor.
# Working on the PHP code doesn't require any further tooling command to run.

services:
    app:
        build:
            context: ./.devcontainer
            dockerfile: Dockerfile
            args:
                # [Choice] Node.js version: 16, 14, 12
                VARIANT: 16
                # On Linux, you may need to update USER_UID and USER_GID below if not your local UID is not 1000.
                #USER_UID: 1000
                #USER_GID: 1000
        volumes:
            - ..:/workspace:cached
            - try-node-node_modules:/workspace/node_modules

        # Overrides default command so things don't shut down after the process ends.
        command: sleep infinity

        # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
        network_mode: service:db

        depends_on:
            - db

        environment:
            MYSQL_HOST: db
            MYSQL_PWD: node
    # Stock mysql database. Used for both grapher and wordpress databases. Root password is hardcoded for now
    db:
        image: mysql/mysql-server:latest
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        volumes:
            - mysql_data:/var/lib/mysql
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: weeniest-stretch-contaminate-gnarl
            MYSQL_ROOT_HOST: "%"

    # mysql 8 container with slight augmentation (+curl, +unzip, +ssh client, ...) for running the DB init scripts
    # These init scripts check if the grapher and wordpress databases and users are missing, if so they create them
    # and pull the data to have a working dev environment. As the wordpress donwload needs a working ssh access, it
    # mounts the SSH agent and ~/.ssh directory into the container
    db-load-data:
        build:
            context: ./devTools/docker/mysql-init-docker
        # image: mysql/mysql-server:latest
        command: "/app/grapher-only-mysql-init.sh"
        volumes:
            - ./devTools/docker:/app
            - ./tmp-downloads:/tmp-downloads
            # - ~/.ssh:/user/.ssh # map the .ssh directory into the container so it knows about the owid-live ssh configuration
            # - ${SSH_AUTH_SOCK}:/ssh-agent # Forward the SSH agent socket into the container
        environment:
            DB_ROOT_PASS: weeniest-stretch-contaminate-gnarl
            DB_HOST: db
            DATA_FOLDER: "/tmp-downloads"
            # SSH_AUTH_SOCK: "/ssh-agent"
        depends_on:
            - db

volumes:
    mysql_data:
    try-node-node_modules:
